
;   Copyright (C) 2011, Alain Gibaud   alain.gibaud@free.fr
;
;   This file is part of the CPIK library
;   ------------------------------------------------------- 
;   This library is free software; you can redistribute it and/or modify it
;   under the terms of the GNU General Public License as published by the
;   Free Software Foundation; either version 2.1, or (at your option) any
;   later version.
 
;   This library is distributed in the hope that it will be useful,
;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;   GNU General Public License for more details.
 
;  You should have received a copy of the GNU General Public License 
;   along with this library; see the file COPYING. If not, write to the
;   Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
;   MA 02110-1301, USA.
 
;   As a special exception, if you link this library with other files,
;   some of which are compiled with CPIK, to produce an executable,
;   this library does not by itself cause the resulting executable to
;   be covered by the GNU General Public License. This exception does
;   not however invalidate any other reasons why the executable file
;   might be covered by the GNU General Public License.


; Version 0.4 
; (paramétrage des pins pour utilisation plus facile dans différents contextes)
; Version modifiee v0.3 (IT support)
; modif 0.2 (routine de telechargement des caracteres user defined)
; ---------------------------------------------------------------


; LCD display is connected to port B
; B<0,3> => DATA<4,7>
; B<5> => RS
; B<4> => E
; Core routines for lcd handling
;<+lcd_stuff>
	
	; .0001 s == .1ms at 16Mhz
delay0_1ms
	; movlw 98 ; 16 Mhz
	; movlw 49 ; 8 Mhz
	;; movlw 15 ;  HACK !! (marche a 8Mhz)
	;; movwf PREINC0,0
	movff lcd_delay_cnt,PREINC0
delay0_1ms_1
	nop
	decfsz INDF0,f,0	; 4 cycles if not skip
	bra delay0_1ms_1
	movf POSTDEC0,W,0
	return 0

	; approximativly 1 ms
delay1ms
	movlw 10
	movwf PREINC0,0
delay1ms_1
	call delay0_1ms
	decfsz INDF0,f,0
	goto delay1ms_1
	movf POSTDEC0,W,0
	return 0


	; W ms
delayW	movwf PREINC0,0
delayW1
	call delay1ms
	decfsz INDF0,f,0
	goto delayW1
	movf POSTDEC0,W,0
	return 0
; ----------------------------------------------------
; ++++ send a command to LCD (4 bits mode)
; input : command in W (W is not corrupted)
lcd_cmd
	; cmd mode
	bcf LCD_RS_PORT,LCD_RS_PIN,0
lcd_4
	movwf PREINC0,0
	bcf LCD_DATA7_PORT,LCD_DATA7_PIN,0
	btfsc INDF0,7
	bsf  LCD_DATA7_PORT,LCD_DATA7_PIN,0

	bcf  LCD_DATA6_PORT,LCD_DATA6_PIN,0
	btfsc INDF0,6
	bsf  LCD_DATA6_PORT,LCD_DATA6_PIN,0

	bcf  LCD_DATA5_PORT,LCD_DATA5_PIN,0
	btfsc INDF0,5
	bsf  LCD_DATA5_PORT,LCD_DATA5_PIN,0

	bcf  LCD_DATA4_PORT,LCD_DATA4_PIN,0
	btfsc INDF0,4
	bsf  LCD_DATA4_PORT,LCD_DATA4_PIN,0

	; send HI nibble
	call lcd_enable

	bcf LCD_DATA7_PORT,LCD_DATA7_PIN,0
	btfsc INDF0,3
	bsf  LCD_DATA7_PORT,LCD_DATA7_PIN,0

	bcf LCD_DATA6_PORT,LCD_DATA6_PIN,0
	btfsc INDF0,2
	bsf  LCD_DATA6_PORT,LCD_DATA6_PIN,0

	bcf LCD_DATA5_PORT,LCD_DATA5_PIN,0
	btfsc INDF0,1
	bsf  LCD_DATA5_PORT,LCD_DATA5_PIN,0

	bcf LCD_DATA4_PORT,LCD_DATA4_PIN,0
	btfsc INDF0,0
	bsf  LCD_DATA4_PORT,LCD_DATA4_PIN,0

	; send LO nibble
	call lcd_enable
	; restore stack
	movf POSTDEC0,W,0
	return 0
; ----------------------------------------------------
; ++++ send a character to LCD (4 bits mode)
; input : command in W (W is not  corrupted)
lcd_char
	; character mode
	bsf LCD_RS_PORT,LCD_RS_PIN,0
	bra lcd_4
; ----------------------------------------------------
; ++++ enable LCD data and wait for execution complete
lcd_enable
	bsf LCD_E_PORT,LCD_E_PIN,0
	call delay1ms
	bcf LCD_E_PORT,LCD_E_PIN,0
	movlw 5
	call delayW
	return 0
; this is delay for delay0_1ms routine.
	CBLOCK
	lcd_delay_cnt:1
	ENDC
;<->
; ++++ set LCD display in 4 bits mode
; void lcd_init(unsigned int cnt) ;
;<+C18_lcd_init>
C18_lcd_init
lcd_init
	
; NOTE: since the lcd_init routine must be called before any other LCD
; routine, the #define directives will be included before any LCD code
; in the output file, so LCD_xxx symbols are guaranteed to be set.
; These symbols can be superseded from C source code  with:
; __asm__("#define LCD_RS_PORT PORTB") ; 
; etc.
; placed anywhere inside the  main() routine
; (several macro are provided for convenience to do that in lcd.h)

ifndef  LCD_RS_PORT
	MESSG "No LCD pinout specified -- Default pinout is: RS=RB5, E=RB4, Data4-7=RB0-3"
	MESSG "Please read the lcd.slb source code for details on how to configure LCD module"
; Pins connection 
; ---------- START EDITION HERE ----------------
; command mode selection pin
#define LCD_RS_PORT PORTB
#define LCD_RS_PIN 5

; enable pin
#define LCD_E_PORT PORTB
#define LCD_E_PIN 4

; data pins used in 4 bit mode
#define LCD_DATA4_PORT PORTB
#define LCD_DATA4_PIN 0
#define LCD_DATA5_PORT PORTB
#define LCD_DATA5_PIN 1
#define LCD_DATA6_PORT PORTB
#define LCD_DATA6_PIN 2
#define LCD_DATA7_PORT PORTB
#define LCD_DATA7_PIN 3
; ----------- STOP EDITION HERE --------------
endif

	;+ essai
	movff INDF0,lcd_delay_cnt
	;- essai
	movlw 40
	call delayW

	; output 0011
	bsf LCD_DATA4_PORT,LCD_DATA4_PIN,0
	bsf LCD_DATA5_PORT,LCD_DATA5_PIN,0
	bcf LCD_DATA6_PORT,LCD_DATA6_PIN,0
	bcf LCD_DATA7_PORT,LCD_DATA7_PIN,0
	bcf LCD_E_PORT,LCD_E_PIN,0
	bcf LCD_RS_PORT,LCD_RS_PIN,0
	; bit 6 and 7 must not be changed
	; send 0011 3 times, as specified by the documentation
	call lcd_enable 
	call lcd_enable
	call lcd_enable


;----------- send 0010xxxx (go to 4 bit mode)
	movlw 5
	call delayW ; wait 5ms

	bcf LCD_DATA4_PORT,LCD_DATA4_PIN,0
	bsf LCD_E_PORT,LCD_E_PIN,0
	call delay1ms
	bcf LCD_E_PORT,LCD_E_PIN,0

	movlw 5
	call delayW

; we are now in 4 bits mode
	movlw 0x28 ; 2 lines, 5x7 cursor
;	movlw 0x20 ; 1 line, 5x7 cursor
	call lcd_cmd
;	movlw 0x0F ; curseur clignotant
	movlw 0x0C ; pas de curseur
	call lcd_cmd
	movlw 0x02 ; curseur home
	call lcd_cmd
	movlw 0x01 ; effacement
	call lcd_cmd

	return 0
;<?lcd_stuff>
;<->
;
; void lcd_putchar(char c) ;
;<+C18_lcd_putchar>
C18_lcd_putchar
	movf	INDF0,W,0
	goto	lcd_char
;<?lcd_stuff>
;<->

; void lcd_putcmd(char c) ;
;<+C18_lcd_putcmd>
C18_lcd_putcmd
	movf	INDF0,W,0
	goto	lcd_cmd
;<?lcd_stuff>
;<->

; print a string located in program space
; (the pointer to the string is on the stack)
; ie: void lcd_Rputs(Romptr p) ;
; TESTED : OK
;<+C18_lcd_Rputs>
C18_lcd_Rputs
	bsf EECON1,EEPGD,0
	bcf EECON1,CFGS,0
	clrf	TBLPTRU ; 16 bit address space
	movff INDF0,TBLPTRH
	movlw -1
	movff PLUSW0,TBLPTRL
lcd_ROMstr1
	TBLRD *+
	movf TABLAT,W,0
	bz lcd_ROMstr2
	call lcd_char,0
	bra lcd_ROMstr1
lcd_ROMstr2
	return 0
;<?lcd_stuff>
;<->
; print a block of N bytes
; ie: void lcd_putb(ROMptr p, int N)
; caution : N must be > 0 
; TESTED : OK
;<+C18_lcd_Rputb>
C18_lcd_Rputb
	bsf EECON1,EEPGD,0
	bcf EECON1,CFGS,0
	clrf	TBLPTRU ; 16 bit address space
	movff INDF0,TBLPTRH
	movlw -1
	movff PLUSW0,TBLPTRL
lcd_ROMblock1
	TBLRD *+
	movf TABLAT,W,0
	call lcd_char,0
        movlw -2
	decf PLUSW0,F,0
	bnz lcd_ROMblock1
	return 0
;<?lcd_stuff>
;<->


; print a string constant 
; whose address follows the CALL instruction
; ie: 
;  lcd_iprint()
;  ROM_TXT("the message") 
; not tested because the Linker has problem with relocation
; TO BE TESTED
;<+C18_lcd_iprint>
C18_lcd_iprint
	bsf EECON1,EEPGD,0
	bcf EECON1,CFGS,0
	clrf	TBLPTRU,0 ; 16 bit address space
	movff TOSH,TBLPTRH
	movff TOSL,TBLPTRL
iprint1
	TBLRD *+
	movf TABLAT,W,0
	bz iprint2
	call lcd_char,0
	bra iprint1
iprint2
	infsnz  TOSL,F,0
	incf	TOSH,F,0

	return 0
;<?lcd_stuff>
;<->

; print a string constant which follows the CALL instruction
; ie: 
;  lcd_RIprint_()
;  ROM_TXT("the message") 
; TO BE TESTED
;<+C18_lcd_RIputs_>
C18_lcd_RIputs_
	bsf EECON1,EEPGD,0
	bcf EECON1,CFGS,0
	movff TOSU,TBLPTRU
	movff TOSH,TBLPTRH
	movff TOSL,TBLPTRL
cprint1
	TBLRD *+
	movf TABLAT,W,0
	bz cprint2
	call lcd_char,0
	infsnz  TOSL,F,0
	incfsz  TOSH,F,0
	bra cprint1
	incf	TOSU,F,0
	bra cprint1
cprint2
	btfss	TOSL,0,0 ; need word alignment ? (odd char count)
	return 0 ; no
	infsnz  TOSL,F,0 ; yes : inc return address
	incfsz  TOSH,F,0
	return 0
	incf	TOSU,F,0
	return 0
;<?lcd_stuff>
;<->



;  move cursor to specified location:
; line 1 begins at 0, line 2 begins at 0x40
; void lcd_move(unsigned int) ;
;<+C18_lcd_move>
C18_lcd_move
	movf INDF0,W,0
	iorlw 0x80 ; makes command 1aaaaaaa
	goto lcd_cmd
;<?lcd_stuff>
;<->

; clear display
;                          void lcd_clear() ;
;<+C18_lcd_clear>
C18_lcd_clear
	movlw 1
	goto lcd_cmd
;<?lcd_stuff>
;<->

; display c's low nibble as hex digit
; void lcd_hex4(int c) ;
;<+C18_lcd_hex4>
C18_lcd_hex4
	movf INDF0,W
	goto lcd_hex4
;<?lcd_hex4>
;<->

	
; display a hex nibble (W low)
; W high must be 0
; W is preserved
;<+lcd_hex4>
lcd_hex4
	movwf	PREINC0,0
	movlw	D'10'
	subwf 	INDF0,W,0
	bnn	lcd_hex4_ge10
	movlw	'0'
	bra	lcd_hex4_display_hex
lcd_hex4_ge10
	movlw 'A'-D'10'
lcd_hex4_display_hex
	addwf	INDF0,W,0
	call lcd_char
	movf	POSTDEC0,W,0
	return 0
;<?lcd_stuff>
;<->	

; display c as 2 digits hex number
; void lcd_hex8(unsigned int c) ;
;<+C18_lcd_hex8>
C18_lcd_hex8
	movf INDF0,W
	goto lcd_hex8
;<?lcd_hex8>
;<->

; display W as a 2 digits hex number
;<+lcd_hex8>
lcd_hex8
	movwf	PREINC0,0
	swapf	INDF0,W,0
	andlw	0x0F
	call	lcd_hex4
	movf	POSTDEC0,W,0
	andlw	0x0F
	goto	lcd_hex4
;<?lcd_hex4>
;<->


; display 16 bit value on top of data stack (TODS)
; as a 4 digits hex number
; void lcd_hex16(unsigned long n) ;
;<+C18_lcd_hex16>
C18_lcd_hex16
lcd_hex16
	movf	INDF0,W,0
	call	lcd_hex8
	movlw	-1
	movf	PLUSW0,W,0
	goto	lcd_hex8
;<?lcd_hex8>
;<->

; void lcd_puts(char *) ;
; print a nul terminated string  whose address is on the stack
;<+C18_lcd_puts>
C18_lcd_puts
; --TESTED-- IT support 
	movff INDF0,FSR1H
	movlw -1
	movff PLUSW0,FSR1L
C18_lcd_puts_loop
	movf POSTINC1,W,0
	bz C18_lcd_puts_end
	call lcd_char
	bra C18_lcd_puts_loop
C18_lcd_puts_end
	return 0
;<?lcd_stuff>
;<->
; --------------------------------------------------
; This code has been written in C -- could be manually optimized  
;<+C18_lcd_define_char> void lcd_define_char(char c@2,char *bitmap@0)
C18_lcd_define_char
	movf PREINC0,F,0 ; reserve stack
;    int i;
;    lcd_putcmd ((0b01000000) | (c << 3));
	movlw 64
	movwf PREINC0,0
	movlw -2
	movff PLUSW0,PREINC0
	movlw 3
	ICALL lshift8u
	movf POSTDEC0,W,0
	iorwf INDF0,F,0
	ICALL C18_lcd_putcmd
	movf POSTDEC0,F,0 ; clean stack 
; 
;    for (i = 8; i ; --i)
	movlw 8
	movwf INDF0,0
L18_l200_lcd_define_char_121
	movf INDF0,F,0
	IBZ L18_l200_lcd_define_char_122
;       lcd_putchar (*bitmap++);
	movlw -3
	movff PLUSW0,PREINC0
	movff PLUSW0,PREINC0
	movlw -5
	incf PLUSW0,F,0
	bnc L18_l200_lcd_define_char_124
	movlw -4
	incf PLUSW0,F,0
L18_l200_lcd_define_char_124
	ICALL indirect8
	ICALL C18_lcd_putchar
	movf POSTDEC0,F,0 ; clean stack 
L18_l200_lcd_define_char_123
	decf INDF0,F,0
	IBRA L18_l200_lcd_define_char_121
L18_l200_lcd_define_char_122
; }
L18_l200_lcd_define_char_120
	movf POSTDEC0,F,0 ; clean stack 
	return 0
;<?C18_lcd_putchar>
;<?C18_lcd_putcmd>
;<?indirect8>
;<?lshift8u>
;<-> void lcd_define_char(char c@2,char *bitmap@0)

	end
